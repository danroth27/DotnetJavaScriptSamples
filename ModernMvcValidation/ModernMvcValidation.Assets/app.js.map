{"mappings":"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","sources":["src/index.ts","src/reporter.ts","src/rules.ts","src/validation.ts"],"sourcesContent":["import { createReporter } from './reporter';\r\nimport { createRules } from './rules';\r\nimport { createValidator } from './validation';\r\n\r\nconst forms = document.forms;\r\n\r\n// Look at all the forms in the page\r\nfor (const form of forms) {\r\n\r\n    // Discover the set of rules for each form\r\n    const rules = createRules(form);\r\n\r\n    const reporters: Array<() => boolean> = [];\r\n\r\n    // Create and attach a validator that updates the markup on any input change\r\n    for (const rule of rules) {\r\n        const validator = createValidator(rule);\r\n        const reporter = createReporter(validator);\r\n        reporters.push(reporter);\r\n\r\n        // Attach the event to all the relevant input elements that might trigger it\r\n        for (const source of rule.changeSources) {\r\n            const input = form.elements.namedItem(source) as HTMLInputElement;\r\n            input.addEventListener('input', (event) => {\r\n                reporter();\r\n            });\r\n\r\n            input.addEventListener('change', (event) => {\r\n                reporter();\r\n            });\r\n        }\r\n    }\r\n\r\n    // Attach to the form submit event and prevent it if any validator reported an error\r\n    form.addEventListener('submit', (event) => {\r\n        for (const reporter of reporters) {\r\n            if (reporter()) {\r\n                // If the reporter reported an error, prevent form submission.\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    });\r\n}","import { RuleSetValidator } from \"./validation\";\r\n\r\nexport function createReporter(validator: RuleSetValidator) {\r\n    return function () {\r\n        const result = validator.validate();\r\n        const message = document.querySelector(`[data-valmsg-for=\"${validator.rules.name}\"]`);\r\n        message?.replaceChildren();\r\n        if (result.length === 0) {\r\n            return false;\r\n        }\r\n        else {\r\n            message?.append(result[0]);\r\n            return true;\r\n        }\r\n    }\r\n}","\r\ntype RuleDefinition = {\r\n    message: string,\r\n    parameters?: { [key: string]: string | undefined }\r\n}\r\n\r\nexport type RuleSet = {\r\n    context: { [key: string]: string },\r\n    name: string,\r\n    changeSources: string[],\r\n    type: 'string' | 'number' | 'boolean' | 'date',\r\n    required?: RuleDefinition,\r\n    length?: RuleDefinition,\r\n    regex?: RuleDefinition,\r\n    compare?: RuleDefinition,\r\n    range?: RuleDefinition,\r\n    phone?: RuleDefinition,\r\n    email?: RuleDefinition,\r\n    url?: RuleDefinition,\r\n}\r\n\r\nexport function createRules(form: HTMLFormElement): RuleSet[] {\r\n\r\n    let result = [];\r\n\r\n    // get all inputs in form\r\n    const inputs = Array.from(form.getElementsByTagName('input'));\r\n\r\n    // iterate over each input\r\n    for (const input of inputs) {\r\n        if (input.dataset['val'] !== 'true') {\r\n            continue;\r\n        }\r\n\r\n        let rules: RuleSet = {\r\n            context: {\r\n                get value() {\r\n                    return input.value;\r\n                }\r\n            },\r\n            name: input.name,\r\n            changeSources: [input.name],\r\n            type: getRuleType(input)\r\n        };\r\n\r\n        if (input.dataset['valRequired']) {\r\n            rules.required = {\r\n                message: input.dataset['valRequired']\r\n            };\r\n        }\r\n        if (input.dataset['valLength']) {\r\n            rules['length'] = {\r\n                parameters: {\r\n                    max: input.dataset['valLengthMax'],\r\n                    min: input.dataset['valLengthMin'],\r\n                },\r\n                message: input.dataset['valLength']\r\n            };\r\n        }\r\n        if (input.dataset['valRange']) {\r\n            rules['range'] = {\r\n                parameters: {\r\n                    max: input.dataset['valRangeMax'],\r\n                    min: input.dataset['valRangeMin'],\r\n                },\r\n                message: input.dataset['valRange']\r\n            };\r\n        }\r\n        if (input.dataset['valEqualto']) {\r\n            const other = input.name.substring(0, input.name.lastIndexOf('.')) + input.dataset['valEqualtoOther']?.substring(1);\r\n            rules['compare'] = {\r\n                parameters: {\r\n                    other: other,\r\n                },\r\n                message: input.dataset['valEqualto']\r\n            };\r\n            rules.changeSources.push(other);\r\n            Object.defineProperty(rules.context, 'other', {\r\n                get: function () {\r\n                    var element = form.elements.namedItem(other);\r\n                    if (element instanceof HTMLInputElement) {\r\n                        return element.value;\r\n                    }\r\n                },\r\n                enumerable: true\r\n            });\r\n        }\r\n        if (input.dataset['valRegex']) {\r\n            rules['regex'] = {\r\n                parameters: {\r\n                    pattern: input.dataset['valRegexPattern'],\r\n                },\r\n                message: input.dataset['valRegex']\r\n            };\r\n        }\r\n        if (input.dataset['valPhone']) {\r\n            rules['phone'] = {\r\n                message: input.dataset['valPhone']\r\n            };\r\n        }\r\n        if (input.dataset['valUrl']) {\r\n            rules['url'] = {\r\n                message: input.dataset['valUrl']\r\n            };\r\n        }\r\n        if (input.dataset['valEmail']) {\r\n            rules['email'] = {\r\n                message: input.dataset['valEmail']\r\n            };\r\n        }\r\n\r\n        result.push(rules);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction getRuleType(input: HTMLInputElement): \"string\" | \"number\" | \"date\" {\r\n    if (input.type === 'button' ||\r\n        input.type === 'checkbox' ||\r\n        input.type === 'color' ||\r\n        input.type === 'email' ||\r\n        input.type === 'file' ||\r\n        input.type === 'hidden' ||\r\n        input.type === 'image' ||\r\n        input.type === 'month' ||\r\n        input.type === 'password' ||\r\n        input.type === 'radio' ||\r\n        input.type === 'reset' ||\r\n        input.type === 'search' ||\r\n        input.type === 'submit' ||\r\n        input.type === 'tel' ||\r\n        input.type === 'text' ||\r\n        input.type === 'time' ||\r\n        input.type === 'url' ||\r\n        input.type === 'week') {\r\n        return 'string';\r\n    }\r\n    if (input.type === 'date' ||\r\n        input.type === 'datetime-local') {\r\n        return 'date';\r\n    }\r\n    if (input.type === 'number' ||\r\n        input.type === 'range') {\r\n        return 'number';\r\n    }\r\n\r\n    throw new Error('Unknown input type');\r\n}\r\n","import { ZodNumber, ZodString, ZodTypeAny, z } from \"zod\";\r\nimport { RuleSet } from \"./rules\"\r\n\r\nexport type RuleSetValidator = {\r\n    validate: () => string[];\r\n    rules: RuleSet;\r\n}\r\n\r\nexport function createValidator(rules: RuleSet): RuleSetValidator {\r\n    let valueValidator: ZodTypeAny = getInitialValidator(rules);\r\n    if (rules.required) {\r\n        valueValidator = z.string().min(1, rules.required.message);\r\n    }\r\n\r\n    if (rules.regex) {\r\n        if (valueValidator instanceof ZodString) {\r\n            valueValidator = valueValidator.regex(new RegExp(rules.regex.parameters?.pattern!), { message: rules.regex.message });\r\n        } else {\r\n            throw new Error('Invalid valueValidator type.');\r\n        }\r\n    }\r\n\r\n    if (rules.url) {\r\n        if (valueValidator instanceof ZodString) {\r\n            valueValidator = valueValidator.url({ message: rules.url.message });\r\n        } else {\r\n            throw new Error('Invalid valueValidator type.');\r\n        }\r\n    }\r\n\r\n    if (rules.email) {\r\n        if (valueValidator instanceof ZodString) {\r\n            valueValidator = valueValidator.email({ message: rules.email.message });\r\n        } else {\r\n            throw new Error('Invalid valueValidator type.');\r\n        }\r\n    }\r\n\r\n    if (rules.phone) {\r\n        if (valueValidator instanceof ZodString) {\r\n            valueValidator = valueValidator.regex(/^\\+?[0-9\\-\\.\\(\\)]+((ext\\.|ext|x)[0-9]+)?$/, { message: rules.phone.message });\r\n        } else {\r\n            throw new Error('Invalid valueValidator type.');\r\n        }\r\n    }\r\n\r\n    if (rules.range) {\r\n        const min = z.coerce.number().optional().parse(rules.range.parameters?.min);\r\n        const max = z.coerce.number().optional().parse(rules.range.parameters?.max);\r\n        const numberValidator = valueValidator as ZodNumber;\r\n        if (min && max) {\r\n            valueValidator = numberValidator.min(min, { message: rules.range.message }).max(max, { message: rules.range.message });\r\n        } else if (min) {\r\n            valueValidator = numberValidator.max(min, { message: rules.range.message });\r\n        } else if (max) {\r\n            valueValidator = numberValidator.max(max, { message: rules.range.message });\r\n        }\r\n    }\r\n\r\n    if (rules.length) {\r\n        const min = z.coerce.number().optional().parse(rules.length.parameters?.min);\r\n        const max = z.coerce.number().optional().parse(rules.length.parameters?.max);\r\n        const numberValidator = valueValidator as ZodNumber;\r\n        if (min && max) {\r\n            valueValidator = numberValidator.min(min, { message: rules.length.message }).max(max, { message: rules.length.message });\r\n        } else if (min) {\r\n            valueValidator = numberValidator.min(min, { message: rules.length.message });\r\n        } else if (max) {\r\n            valueValidator = numberValidator.max(max, { message: rules.length.message });\r\n        }\r\n    }\r\n\r\n    const objectValidator = !rules.compare ?\r\n        z.object({\r\n            value: valueValidator\r\n        }) :\r\n        z.object({\r\n            value: valueValidator,\r\n            other: z.string()\r\n        }).refine(val => {\r\n            return val.value === val.other;\r\n        }, { message: rules.compare.message });\r\n\r\n    return {\r\n        validate: () => {\r\n            const result = objectValidator!.safeParse(rules.context);\r\n            if (result.success) {\r\n                return [];\r\n            } else {\r\n                const formatted = result.error.errors.map(e => e.message);\r\n                return formatted;\r\n            }\r\n        },\r\n        rules: rules\r\n    }\r\n}\r\n\r\nfunction getInitialValidator(rules: RuleSet): z.ZodTypeAny {\r\n    switch (rules.type) {\r\n        case 'string':\r\n            return z.string();\r\n        case 'number':\r\n            return z.coerce.number();\r\n        case 'boolean':\r\n            return z.coerce.boolean();\r\n        case 'date':\r\n            return z.coerce.date();\r\n        default:\r\n            return z.any();\r\n    }\r\n}"],"names":[],"version":3,"file":"app.js.map"}